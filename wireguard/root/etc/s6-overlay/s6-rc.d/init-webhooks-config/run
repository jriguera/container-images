#!/usr/bin/with-contenv bash
# shellcheck shell=bash

# Set default config directory if not provided
CONFIGDIR="${CONFIGDIR:-/config}"
CONFIGDIR_WEBHOOK="${CONFIGDIR_WEBHOOK:-${CONFIGDIR}/webhook}"
CONFIGDIR_TEMPLATES="${CONFIGDIR_TEMPLATES:-$CONFIGDIR/templates}"

# Default to generating webhook config
GENERATE_WEBHOOK_CONFIG="${GENERATE_WEBHOOK_CONFIG:-true}"

# Webhook configuration parameters and defaults
export WEBHOOK_ENABLED="${WEBHOOK_ENABLED:-true}"
export WEBHOOK_PORT="${WEBHOOK_PORT:-9000}"
export WEBHOOK_VERBOSE="${WEBHOOK_VERBOSE:-false}"
export WEBHOOK_HOTRELOAD="${WEBHOOK_HOTRELOAD:-true}"
export WEBHOOK_ADDR="${WEBHOOK_ADDR:-0.0.0.0}"

# Load env file if it exists
if [[ -f "${CONFIGDIR}/env" ]]
then
    # shellcheck source=/dev/null
    source "${CONFIGDIR}/env"
fi

printf %s "${WEBHOOK_ENABLED}" > /run/s6/container_environment/WEBHOOK_ENABLED
if [[ ${WEBHOOK_ENABLED} == "false" ]]
then
    echo "* Webhook not enabled, skipping configuration"
    exit 0
fi

# Make folders if required
mkdir -p "${CONFIGDIR_WEBHOOK}" "${CONFIGDIR_TEMPLATES}"

# prepare templates, so user can modify them if needed
[[ ! -f $CONFIGDIR_TEMPLATES/hooks.yaml ]] && cp /defaults/hooks.yaml $CONFIGDIR_TEMPLATES/hooks.yaml

# Generate configuration file if GENERATE_WEBHOOK_CONFIG is true, 1, True, TRUE or not defined
if [[ -z "${GENERATE_WEBHOOK_CONFIG}" ]] || [[ "${GENERATE_WEBHOOK_CONFIG,,}" == "true" ]] || [[ "${GENERATE_WEBHOOK_CONFIG}" == "1" ]]
then
    if [[ ! -f "${CONFIGDIR_WEBHOOK}/hooks.yaml" ]]
    then
        echo "* Generating default webhook configuration ..."
        eval "echo \"$(cat ${CONFIGDIR_TEMPLATES}/hooks.yaml)\"" > "${CONFIGDIR_WEBHOOK}/hooks.yaml"
    else
        echo "* Webhook configuration already exists at ${CONFIGDIR_WEBHOOK}/hooks.yaml, skipping generation..."
    fi
else
    echo "* Webhook configuration generation disabled (GENERATE_WEBHOOK_CONFIG=${GENERATE_WEBHOOK_CONFIG})"
fi

if [[ -z ${LSIO_NON_ROOT_USER} ]]
then
    lsiown -R abc:abc "${CONFIGDIR_WEBHOOK}"
fi
