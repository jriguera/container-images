#!/usr/bin/env python3
"""
PBKDF2 salt+key generator.

# Copyright (C) 2025 Jose Riguera <jriguera@gmail.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.

Usage examples:
  pbkdf2 mysecretpassword
  echo "hola" | pbkdf2
"""
import os
import sys
import argparse
import hashlib
import base64

ITERATIONS = 100000

def generate(password: str) -> str:
    """Generate a base64-encoded salt:key string using PBKDF2-HMAC-SHA512."""
    salt = os.urandom(16)
    key = hashlib.pbkdf2_hmac(
        "sha512",                  # hash method
        password.encode("utf-8"),  # password as bytes
        salt,                      # salt
        ITERATIONS,                # iterations
        dklen=64                   # derived key length
    )
    salt_b64 = base64.b64encode(salt).decode("utf-8")
    key_b64 = base64.b64encode(key).decode("utf-8")
    return f"{salt_b64}:{key_b64}"

def parse_args() -> argparse.Namespace:
    parser = argparse.ArgumentParser(
        description="Generate PBKDF2 salt:key (base64) with fixed iterations."
    )
    parser.add_argument(
        "password",
        nargs="?",
        help="Password to derive from. If omitted, stdin is used."
    )
    return parser.parse_args()

if __name__ == "__main__":
    args = parse_args()
    if args.password:
        password = args.password
    elif not sys.stdin.isatty():
        password = sys.stdin.read().strip()
    else:
        sys.exit("Error: no password provided (use argument or pipe via stdin).")
    print(generate(password))
